AWSTemplateFormatVersion: 2010-09-09
Transform:
  - AWS::Serverless-2016-10-31
  - AWS::CodeStar

Parameters:
  ProjectId:
    Type: String
    Description: AWS CodeStar projectID used to associate new resources to team members
  CodeDeployRole:
    Type: String
    Description: IAM role to allow AWS CodeDeploy to manage deployment of AWS Lambda functions
  Stage:
    Type: String
    Description: The name for a project pipeline stage, such as Staging or Prod, for which resources are provisioned and deployed.
    Default: ""

Globals:
  Function:
    AutoPublishAlias: live
    DeploymentPreference:
      Enabled: true
      Type: Canary10Percent5Minutes
      Role: !Ref CodeDeployRole

Resources:
  HelloWorld:
    Timeout: 10
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "awscodestar-${ProjectId}-lambda-HelloWorld"
      Handler: index.handler
      Runtime: nodejs12.x
      Environment:
        Variables:
          NODE_ENV: production
      Role:
        Fn::GetAtt:
          - LambdaExecutionRole
          - Arn
      Events:
        GetEvent:
          Type: Api
          Properties:
            Path: /
            Method: get
        PostEvent:
          Type: Api
          Properties:
            Path: /
            Method: post
  ScriptOne:
    Timeout: 10
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "awscodestar-${ProjectId}-lambda-ScriptOne"
      Handler: index.handler
      Runtime: nodejs12.x
      Environment:
        Variables:
          NODE_ENV: production
      Role:
        Fn::GetAtt:
          - LambdaExecutionRole
          - Arn
      Events:
        GetEvent:
          Type: Api
          Properties:
            Path: /1
            Method: get
  ScriptTwo:
    Timeout: 10
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "awscodestar-${ProjectId}-lambda-ScriptTwo"
      Handler: index.handler
      Runtime: nodejs12.x
      Environment:
        Variables:
          NODE_ENV: production
      Role:
        Fn::GetAtt:
          - LambdaExecutionRole
          - Arn
      Events:
        GetEvent:
          Type: Api
          Properties:
            Path: /2
            Method: get
  ScriptThree:
    Timeout: 10
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "awscodestar-${ProjectId}-lambda-ScriptThree"
      Handler: index.handler
      Runtime: nodejs12.x
      Environment:
        Variables:
          NODE_ENV: production
      Role:
        Fn::GetAtt:
          - LambdaExecutionRole
          - Arn
      Events:
        GetEvent:
          Type: Api
          Properties:
            Path: /3
            Method: get
  JSONOne:
    Timeout: 10
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "awscodestar-${ProjectId}-lambda-JSONOne"
      Handler: index.handler
      Runtime: nodejs12.x
      Environment:
        Variables:
          NODE_ENV: production
      Role:
        Fn::GetAtt:
          - LambdaExecutionRole
          - Arn
      Events:
        GetEvent:
          Type: Api
          Properties:
            Path: /json-1
            Method: get
  JSONTwo:
    Timeout: 10
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "awscodestar-${ProjectId}-lambda-JSONTwo"
      Handler: index.handler
      Runtime: nodejs12.x
      Environment:
        Variables:
          NODE_ENV: production
      Role:
        Fn::GetAtt:
          - LambdaExecutionRole
          - Arn
      Events:
        GetEvent:
          Type: Api
          Properties:
            Path: /json-2
            Method: get
  JSONThree:
    Timeout: 10
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "awscodestar-${ProjectId}-lambda-JSONThree"
      Handler: index.handler
      Runtime: nodejs12.x
      Environment:
        Variables:
          NODE_ENV: production
      Role:
        Fn::GetAtt:
          - LambdaExecutionRole
          - Arn
      Events:
        GetEvent:
          Type: Api
          Properties:
            Path: /json-3
            Method: get
  JSONJS:
    Timeout: 10
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "awscodestar-${ProjectId}-lambda-JSONJS"
      Handler: index.handler
      Runtime: nodejs12.x
      Environment:
        Variables:
          NODE_ENV: production
      Role:
        Fn::GetAtt:
          - LambdaExecutionRole
          - Arn
      Events:
        GetEvent:
          Type: Api
          Properties:
            Path: /json-js
            Method: get
  JSONTxt:
    Timeout: 10
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "awscodestar-${ProjectId}-lambda-JSONTxt"
      Handler: index.handler
      Runtime: nodejs12.x
      Environment:
        Variables:
          NODE_ENV: production
      Role:
        Fn::GetAtt:
          - LambdaExecutionRole
          - Arn
      Events:
        GetEvent:
          Type: Api
          Properties:
            Path: /json-txt
            Method: get
  HTMLOne:
    Timeout: 10
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "awscodestar-${ProjectId}-lambda-HTMLOne"
      Handler: index.handler
      Runtime: nodejs12.x
      Environment:
        Variables:
          NODE_ENV: production
      Role:
        Fn::GetAtt:
          - LambdaExecutionRole
          - Arn
      Events:
        GetEvent:
          Type: Api
          Properties:
            Path: /html-1
            Method: get
  DefVarOk1:
    Timeout: 10
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "awscodestar-${ProjectId}-lambda-DefVarOk1"
      Handler: index.handler
      Runtime: nodejs12.x
      Environment:
        Variables:
          NODE_ENV: production
      Role:
        Fn::GetAtt:
          - LambdaExecutionRole
          - Arn
      Events:
        GetEvent:
          Type: Api
          Properties:
            Path: /defvar-ok-1
            Method: get
  DefVarOk1:
    Timeout: 10
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "awscodestar-${ProjectId}-lambda-DefVarOk1"
      Handler: index.handler
      Runtime: nodejs12.x
      Environment:
        Variables:
          NODE_ENV: production
      Role:
        Fn::GetAtt:
          - LambdaExecutionRole
          - Arn
      Events:
        GetEvent:
          Type: Api
          Properties:
            Path: /defvar-ok-1
            Method: get
  DefVarOk2:
    Timeout: 10
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "awscodestar-${ProjectId}-lambda-DefVarOk2"
      Handler: index.handler
      Runtime: nodejs12.x
      Environment:
        Variables:
          NODE_ENV: production
      Role:
        Fn::GetAtt:
          - LambdaExecutionRole
          - Arn
      Events:
        GetEvent:
          Type: Api
          Properties:
            Path: /defvar-ok-2
            Method: get
  DefVarBad1:
    Timeout: 10
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "awscodestar-${ProjectId}-lambda-DefVarBad1"
      Handler: index.handler
      Runtime: nodejs12.x
      Environment:
        Variables:
          NODE_ENV: production
      Role:
        Fn::GetAtt:
          - LambdaExecutionRole
          - Arn
      Events:
        GetEvent:
          Type: Api
          Properties:
            Path: /defvar-bad-1
            Method: get
  DefVarBad2:
    Timeout: 10
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "awscodestar-${ProjectId}-lambda-DefVarBad2"
      Handler: index.handler
      Runtime: nodejs12.x
      Environment:
        Variables:
          NODE_ENV: production
      Role:
        Fn::GetAtt:
          - LambdaExecutionRole
          - Arn
      Events:
        GetEvent:
          Type: Api
          Properties:
            Path: /defvar-bad-2
            Method: get
  LambdaExecutionRole:
    Description: Creating service role in IAM for AWS Lambda
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "CodeStar-${ProjectId}-Execution${Stage}"
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: [lambda.amazonaws.com]
            Action: sts:AssumeRole
      Path: /
      ManagedPolicyArns:
        - !Sub "arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
      PermissionsBoundary: !Sub "arn:${AWS::Partition}:iam::${AWS::AccountId}:policy/CodeStar_${ProjectId}_PermissionsBoundary"
